import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:3.2.1"
        classpath "com.bmuschko:gradle-docker-plugin:7.4.0"
    }
}

apply plugin: 'base'
apply plugin: 'com.github.node-gradle.node' // gradle-node-plugin
apply plugin: 'com.bmuschko.docker-remote-api' //read: https://bmuschko.github.io/gradle-docker-plugin/current/user-guide/

node {
    // Version of node to use.
    version = '16.17.0'

    // Version of npm to use.
    npmVersion = '8.15.0'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

task test(type: NpmTask) {
    description = 'perform test'
    dependsOn 'npmInstall'
    args = ['test']
}

task testreport(type: NpmTask) {
    description = 'perform test with report'
    dependsOn 'npmInstall'
    args = ['run','test-report']
}

task pullDVWA(type: DockerPullImage){
    image = "sagikazarmark/dvwa:latest"
}

task provisionDVWA(type: DockerCreateContainer, dependsOn: pullDVWA){
    targetImageId pullDVWA.getImage()
    hostConfig.portBindings = ['8080:80']
    hostConfig.autoRemove = true
    hostName = 'dvwa'
}

task runDVWA(type: DockerStartContainer,dependsOn: provisionDVWA){
  targetContainerId provisionDVWA.getContainerId()
}

task stopDVWA(type: DockerStopContainer){
    targetContainerId runDVWA.getContainerId()
}
